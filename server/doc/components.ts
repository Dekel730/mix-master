export const errorHandler = (
	statusCode: number,
	description: string,
	errorMessage: string
) => {
	const error = {
		[statusCode]: {
			description: description,
			content: {
				'application/json': {
					schema: {
						type: 'object',
						properties: {
							success: {
								type: 'boolean',
								example: false,
							},
							message: {
								type: 'string',
								example: errorMessage,
							},
						},
					},
				},
			},
		},
	};
	return error;
};

const components = {
	securitySchemes: {
		jwtAuth: {
			type: 'apiKey',
			in: 'header',
			name: 'Authorization',
			description:
				'Enter your JWT token directly in the `Authorization` header (with a `Bearer` prefix).',
		},
	},
	schemas: {
		User: {
			type: 'object',
			properties: {
				f_name: {
					type: 'string',
					description: 'First name of the user',
				},
				l_name: {
					type: 'string',
					description: 'Last name of the user',
				},
				email: {
					type: 'string',
					format: 'email',
					description: 'Email address of the user',
				},
				password: {
					type: 'string',
					format: 'password',
					description: 'Password of the user',
				},
				isVerified: {
					type: 'boolean',
					description: 'Whether the user is verified',
				},
				resetPasswordToken: {
					type: 'string',
					description: 'Token used for resetting the password',
				},
				picture: {
					type: 'string',
					format: 'url',
					description: 'Profile picture URL',
				},
				followers: {
					type: 'array',
					items: {
						type: 'string',
						format: 'uuid',
						description: 'IDs of users who follow this user',
					},
					description: 'Array of follower IDs',
				},
				following: {
					type: 'array',
					items: {
						type: 'string',
						format: 'uuid',
						description: 'IDs of users this user follows',
					},
					description: 'Array of following IDs',
				},
				createdAt: {
					type: 'string',
					format: 'date-time',
					description: 'Timestamp when the user was created',
				},
			},
			required: [
				'f_name',
				'l_name',
				'email',
				'password',
				'isVerified',
				'followers',
				'following',
			],
			description: 'Schema representing a user in the system',
		},
		Post: {
			type: 'object',
			properties: {
				title: {
					type: 'string',
					description: 'The title of the post',
				},
				description: {
					type: 'string',
					description: 'A short description of the post',
				},
				images: {
					type: 'array',
					items: {
						type: 'string',
						format: 'url',
						description: 'Image URLs related to the post',
					},
					description: 'Array of image URLs',
				},
				ingredients: {
					type: 'array',
					items: {
						type: 'object',
						properties: {
							name: {
								type: 'string',
								description: 'Name of the ingredient',
							},
							amount: {
								type: 'string',
								description: 'Amount of the ingredient',
							},
						},
					},
					description: 'List of ingredients used in the post',
				},
				instructions: {
					type: 'array',
					items: {
						type: 'string',
						description: 'Step-by-step instructions for the post',
					},
					description: 'Instructions for preparing the post content',
				},
				user: {
					type: 'string',
					format: 'uuid',
					description: 'The ID of the user who created the post',
				},
				likes: {
					type: 'array',
					items: {
						type: 'string',
						format: 'uuid',
						description: 'IDs of users who liked this post',
					},
					description: 'List of user IDs who liked the post',
				},
				comments: {
					type: 'array',
					items: {
						type: 'string',
						format: 'uuid',
						description: 'IDs of comments on this post',
					},
					description: 'List of comment IDs associated with the post',
				},
				ai: {
					type: 'boolean',
					description: 'Whether the post content was generated by AI',
				},
				createdAt: {
					type: 'string',
					format: 'date-time',
					description: 'Timestamp when the post was created',
				},
				updatedAt: {
					type: 'string',
					format: 'date-time',
					description: 'Timestamp when the post was last updated',
				},
			},
			required: [
				'title',
				'images',
				'ingredients',
				'instructions',
				'user',
			],
			description: 'Schema representing a post in the system',
		},
		Comment: {
			type: 'object',
			properties: {
				user: {
					type: 'string',
					format: 'uuid',
					description: 'ID of the user who created the comment',
				},
				post: {
					type: 'string',
					format: 'uuid',
					description: 'ID of the post associated with the comment',
				},
				content: {
					type: 'string',
					description: 'The content of the comment',
				},
				likes: {
					type: 'array',
					items: {
						type: 'string',
						format: 'uuid',
					},
					description: 'List of user IDs who liked this comment',
				},
				parentComment: {
					type: 'string',
					format: 'uuid',
					description: 'ID of the parent comment, if this is a reply',
				},
				replies: {
					type: 'array',
					items: {
						type: 'string',
						format: 'uuid',
					},
					description: 'List of reply comment IDs',
				},
				createdAt: {
					type: 'string',
					format: 'date-time',
					description: 'Timestamp when the comment was created',
				},
				updatedAt: {
					type: 'string',
					format: 'date-time',
					description: 'Timestamp when the comment was last updated',
				},
			},
			required: ['user', 'post', 'content'],
			description: 'Schema representing a comment in the system',
		},
	},
};

export default components;
